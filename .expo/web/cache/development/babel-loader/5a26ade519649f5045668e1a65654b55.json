{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { CommentActionType } from \"../action-types\";\nimport { cansa } from \"../../consts/Selector\";\nexport var getComments = function getComments(product_id) {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(cansa[1] + \"/api/comment/all/\" + product_id + \"/e4611a028c71342a5b083d2cbf59c494\"));\n\n          case 3:\n            response = _context.sent;\n\n            if (!response) {\n              dispatch({\n                type: CommentActionType.ON_COMMENT_ERROR,\n                payload: 'Product list error'\n              });\n            } else {\n              dispatch({\n                type: CommentActionType.GET_ALL_COMMENT,\n                payload: response.data.data\n              });\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: CommentActionType.ON_COMMENT_ERROR,\n              payload: _context.t0\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nexport var addComment = function addComment(product_id, user_id, comment_content, comment_rating) {\n  return function _callee2(dispatch) {\n    var data, response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            data = {\n              user_id: user_id,\n              comment_content: comment_content,\n              product_id: product_id,\n              comment_rating: comment_rating\n            };\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(cansa[1] + \"/api/comment/insert/e4611a028c71342a5b083d2cbf59c494\", data));\n\n          case 4:\n            response = _context2.sent;\n\n            if (!response) {\n              dispatch({\n                type: CommentActionType.ON_COMMENT_ERROR,\n                payload: 'Product list error'\n              });\n            } else {\n              dispatch({\n                type: CommentActionType.ADD_COMMENT,\n                payload: response.data.data\n              });\n            }\n\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](1);\n            dispatch({\n              type: CommentActionType.ON_COMMENT_ERROR,\n              payload: _context2.t0\n            });\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  };\n};","map":{"version":3,"sources":["E:/React_mobile_brand/CDTN-2/src/redux/actions/commentActions.ts"],"names":["axios","CommentActionType","cansa","getComments","product_id","dispatch","get","response","type","ON_COMMENT_ERROR","payload","GET_ALL_COMMENT","data","addComment","user_id","comment_content","comment_rating","post","ADD_COMMENT"],"mappings":";AAEA,OAAQA,KAAR,MAAoB,OAApB;AACA,SAAUC,iBAAV;AACA,SAAQC,KAAR;AAkBA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,UAAD,EAAwB;AAC/C,SAAO,iBAAQC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEwBL,KAAK,CAACM,GAAN,CAAkBJ,KAAK,CAAC,CAAD,CAAvB,yBAA8CE,UAA9C,uCAFxB;;AAAA;AAEOG,YAAAA,QAFP;;AAGC,gBAAG,CAACA,QAAJ,EAAa;AACTF,cAAAA,QAAQ,CAAC;AACLG,gBAAAA,IAAI,EAAEP,iBAAiB,CAACQ,gBADnB;AAELC,gBAAAA,OAAO,EAAE;AAFJ,eAAD,CAAR;AAIH,aALD,MAKK;AAEDL,cAAAA,QAAQ,CAAC;AACLG,gBAAAA,IAAI,EAAEP,iBAAiB,CAACU,eADnB;AAELD,gBAAAA,OAAO,EAAEH,QAAQ,CAACK,IAAT,CAAcA;AAFlB,eAAD,CAAR;AAIH;;AAdF;AAAA;;AAAA;AAAA;AAAA;AAiBCP,YAAAA,QAAQ,CAAC;AACLG,cAAAA,IAAI,EAAEP,iBAAiB,CAACQ,gBADnB;AAELC,cAAAA,OAAO;AAFF,aAAD,CAAR;;AAjBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAwBH,CAzBM;AA2BP,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACT,UAAD,EAAoBU,OAApB,EAAmCC,eAAnC,EAA0DC,cAA1D,EAAoF;AAC1G,SAAO,kBAAQX,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AACGO,YAAAA,IADH,GACU;AACTE,cAAAA,OAAO,EAAEA,OADA;AAETC,cAAAA,eAAe,EAAEA,eAFR;AAGTX,cAAAA,UAAU,EAAEA,UAHH;AAITY,cAAAA,cAAc,EAAEA;AAJP,aADV;AAAA;AAAA;AAAA,6CAQwBhB,KAAK,CAACiB,IAAN,CAAmBf,KAAK,CAAC,CAAD,CAAxB,2DAAkFU,IAAlF,CARxB;;AAAA;AAQOL,YAAAA,QARP;;AASC,gBAAG,CAACA,QAAJ,EAAa;AACTF,cAAAA,QAAQ,CAAC;AACLG,gBAAAA,IAAI,EAAEP,iBAAiB,CAACQ,gBADnB;AAELC,gBAAAA,OAAO,EAAE;AAFJ,eAAD,CAAR;AAIH,aALD,MAKK;AAEDL,cAAAA,QAAQ,CAAC;AACLG,gBAAAA,IAAI,EAAEP,iBAAiB,CAACiB,WADnB;AAELR,gBAAAA,OAAO,EAAEH,QAAQ,CAACK,IAAT,CAAcA;AAFlB,eAAD,CAAR;AAIH;;AApBF;AAAA;;AAAA;AAAA;AAAA;AAuBCP,YAAAA,QAAQ,CAAC;AACLG,cAAAA,IAAI,EAAEP,iBAAiB,CAACQ,gBADnB;AAELC,cAAAA,OAAO;AAFF,aAAD,CAAR;;AAvBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA8BH,CA/BM","sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { CommentModel } from \"../models\";\r\nimport  axios  from 'axios';\r\nimport {  CommentActionType } from \"../action-types\";\r\nimport {cansa} from \"../../consts/Selector\";\r\n\r\nexport interface GetComment{\r\n    readonly type: CommentActionType.GET_ALL_COMMENT,\r\n    payload?: [CommentModel]\r\n}\r\n\r\nexport interface CommentErrorAction{\r\n    readonly type: CommentActionType.ON_COMMENT_ERROR,\r\n    payload: any\r\n}\r\nexport interface AddCommentAction{\r\n    readonly type: CommentActionType.ADD_COMMENT,\r\n    payload: any\r\n}\r\n\r\nexport type CommentActions = GetComment | CommentErrorAction | AddCommentAction;\r\n\r\nexport const getComments = (product_id: number) => {\r\n    return async ( dispatch: Dispatch<CommentActions>) => {\r\n        try {\r\n            const response = await axios.get<any>(`${cansa[1]}/api/comment/all/${product_id}/e4611a028c71342a5b083d2cbf59c494`)\r\n            if(!response){\r\n                dispatch({\r\n                    type: CommentActionType.ON_COMMENT_ERROR,\r\n                    payload: 'Product list error'\r\n                })\r\n            }else{\r\n                // save our location in local storage\r\n                dispatch({\r\n                    type: CommentActionType.GET_ALL_COMMENT,\r\n                    payload: response.data.data\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: CommentActionType.ON_COMMENT_ERROR,\r\n                payload: error\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const addComment = (product_id: number,user_id:number,comment_content:string,comment_rating:number) => {\r\n    return async ( dispatch: Dispatch<CommentActions>) => {\r\n        const data = {\r\n            user_id: user_id,\r\n            comment_content: comment_content,\r\n            product_id: product_id,\r\n            comment_rating: comment_rating,\r\n        }\r\n        try {\r\n            const response = await axios.post<any>(`${cansa[1]}/api/comment/insert/e4611a028c71342a5b083d2cbf59c494`,data)\r\n            if(!response){\r\n                dispatch({\r\n                    type: CommentActionType.ON_COMMENT_ERROR,\r\n                    payload: 'Product list error'\r\n                })\r\n            }else{\r\n                // save our location in local storage\r\n                dispatch({\r\n                    type: CommentActionType.ADD_COMMENT,\r\n                    payload: response.data.data\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: CommentActionType.ON_COMMENT_ERROR,\r\n                payload: error\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}