{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { OderActionType } from \"../action-types\";\nimport { cansa } from \"../../consts/Selector\";\nexport var addOder = function addOder(diaChi, sdt, user_id) {\n  return function _callee(dispatch) {\n    var data, response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = {\n              address: diaChi,\n              phone: sdt\n            };\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(cansa[1] + \"/api/oder/save/\" + user_id + \"/e4611a028c71342a5b083d2cbf59c494\", data));\n\n          case 4:\n            response = _context.sent;\n\n            if (!response) {\n              dispatch({\n                type: OderActionType.ON_ORDER_ERROR,\n                payload: 'Product list error'\n              });\n            } else {\n              dispatch({\n                type: OderActionType.ADD_ORDER,\n                payload: response.data.status\n              });\n            }\n\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch({\n              type: OderActionType.ON_ORDER_ERROR,\n              payload: _context.t0\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  };\n};\nexport var getAllOder = function getAllOder(user_id) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  return function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(cansa[1] + \"/api/oder/all/\" + user_id + \"/\" + option + \"/e4611a028c71342a5b083d2cbf59c494\"));\n\n          case 3:\n            response = _context2.sent;\n\n            if (!response) {\n              dispatch({\n                type: OderActionType.ON_ORDER_ERROR,\n                payload: 'Product list error'\n              });\n            } else {\n              dispatch({\n                type: OderActionType.GET_ALL_ORDER,\n                payload: response.data.data\n              });\n            }\n\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch({\n              type: OderActionType.ON_ORDER_ERROR,\n              payload: _context2.t0\n            });\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};","map":{"version":3,"sources":["E:/React_mobile_brand/CDTN-2/src/redux/actions/oderActions.ts"],"names":["axios","OderActionType","cansa","addOder","diaChi","sdt","user_id","dispatch","data","address","phone","post","response","type","ON_ORDER_ERROR","payload","ADD_ORDER","status","getAllOder","option","get","GET_ALL_ORDER"],"mappings":";AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT;AACA,SAASC,KAAT;AAmBA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAAiBC,GAAjB,EAA8BC,OAA9B,EAAkD;AACrE,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,IADH,GACU;AACTC,cAAAA,OAAO,EAAEL,MADA;AAETM,cAAAA,KAAK,EAAEL;AAFE,aADV;AAAA;AAAA;AAAA,6CAMwBL,KAAK,CAACW,IAAN,CAAmBT,KAAK,CAAC,CAAD,CAAxB,uBAA6CI,OAA7C,wCAAyFE,IAAzF,CANxB;;AAAA;AAMOI,YAAAA,QANP;;AAOC,gBAAI,CAACA,QAAL,EAAe;AACXL,cAAAA,QAAQ,CAAC;AACLM,gBAAAA,IAAI,EAAEZ,cAAc,CAACa,cADhB;AAELC,gBAAAA,OAAO,EAAE;AAFJ,eAAD,CAAR;AAIH,aALD,MAKO;AAEHR,cAAAA,QAAQ,CAAC;AACLM,gBAAAA,IAAI,EAAEZ,cAAc,CAACe,SADhB;AAELD,gBAAAA,OAAO,EAAEH,QAAQ,CAACJ,IAAT,CAAcS;AAFlB,eAAD,CAAR;AAIH;;AAlBF;AAAA;;AAAA;AAAA;AAAA;AAqBCV,YAAAA,QAAQ,CAAC;AACLM,cAAAA,IAAI,EAAEZ,cAAc,CAACa,cADhB;AAELC,cAAAA,OAAO;AAFF,aAAD,CAAR;;AArBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA4BH,CA7BM;AA+BP,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACZ,OAAD,EAAyC;AAAA,MAAvBa,MAAuB,uEAAN,CAAM;AAO/D,SAAO,kBAAOZ,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEwBP,KAAK,CAACoB,GAAN,CAAkBlB,KAAK,CAAC,CAAD,CAAvB,sBAA2CI,OAA3C,SAAsDa,MAAtD,uCAFxB;;AAAA;AAEOP,YAAAA,QAFP;;AAGC,gBAAI,CAACA,QAAL,EAAe;AACXL,cAAAA,QAAQ,CAAC;AACLM,gBAAAA,IAAI,EAAEZ,cAAc,CAACa,cADhB;AAELC,gBAAAA,OAAO,EAAE;AAFJ,eAAD,CAAR;AAIH,aALD,MAKO;AAEHR,cAAAA,QAAQ,CAAC;AACLM,gBAAAA,IAAI,EAAEZ,cAAc,CAACoB,aADhB;AAELN,gBAAAA,OAAO,EAAEH,QAAQ,CAACJ,IAAT,CAAcA;AAFlB,eAAD,CAAR;AAIH;;AAdF;AAAA;;AAAA;AAAA;AAAA;AAiBCD,YAAAA,QAAQ,CAAC;AACLM,cAAAA,IAAI,EAAEZ,cAAc,CAACa,cADhB;AAELC,cAAAA,OAAO;AAFF,aAAD,CAAR;;AAjBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAwBH,CA/BM","sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { ProductModel, OderModel } from \"../models\";\r\nimport axios from 'axios';\r\nimport { OderActionType, ProductActionType } from \"../action-types\";\r\nimport { cansa } from \"../../consts/Selector\";\r\n\r\nexport interface AddOrder {\r\n    readonly type: OderActionType.ADD_ORDER,\r\n    payload?: string,\r\n}\r\n\r\nexport interface GetAllOrder {\r\n    readonly type: OderActionType.GET_ALL_ORDER,\r\n    payload?: OderModel,\r\n}\r\n\r\nexport interface OderErrorAction {\r\n    readonly type: OderActionType.ON_ORDER_ERROR,\r\n    payload: any\r\n}\r\n\r\nexport type OrderActions = AddOrder | OderErrorAction | GetAllOrder;\r\n\r\nexport const addOder = (diaChi: string, sdt: string, user_id: number) => {\r\n    return async (dispatch: Dispatch<OrderActions>) => {\r\n        const data = {\r\n            address: diaChi,\r\n            phone: sdt,\r\n        }\r\n        try {\r\n            const response = await axios.post<any>(`${cansa[1]}/api/oder/save/${user_id}/e4611a028c71342a5b083d2cbf59c494`, data);\r\n            if (!response) {\r\n                dispatch({\r\n                    type: OderActionType.ON_ORDER_ERROR,\r\n                    payload: 'Product list error'\r\n                })\r\n            } else {\r\n                // save our location in local storage\r\n                dispatch({\r\n                    type: OderActionType.ADD_ORDER,\r\n                    payload: response.data.status\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: OderActionType.ON_ORDER_ERROR,\r\n                payload: error\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const getAllOder = (user_id: number, option: number = 3) => {\r\n    /**\r\n     * 0. đã hủy\r\n     * 1. đã đặt\r\n     * 2. đã nhận\r\n     * 3. tất cả\r\n     */\r\n    return async (dispatch: Dispatch<OrderActions>) => {\r\n        try {\r\n            const response = await axios.get<any>(`${cansa[1]}/api/oder/all/${user_id}/${option}/e4611a028c71342a5b083d2cbf59c494`);\r\n            if (!response) {\r\n                dispatch({\r\n                    type: OderActionType.ON_ORDER_ERROR,\r\n                    payload: 'Product list error'\r\n                })\r\n            } else {\r\n                // save our location in local storage\r\n                dispatch({\r\n                    type: OderActionType.GET_ALL_ORDER,\r\n                    payload: response.data.data\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: OderActionType.ON_ORDER_ERROR,\r\n                payload: error\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}