{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { UserActionType } from \"../action-types\";\nimport { cansa } from \"../../consts/Selector\";\nexport var checkLogin = function checkLogin() {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(cansa[1] + \"/api/user/check/login\"));\n\n          case 3:\n            response = _context.sent;\n\n            if (!response) {\n              dispatch({\n                type: UserActionType.ON_LOGIN_ERROR,\n                payload: 'Product list error'\n              });\n            } else {\n              dispatch({\n                type: UserActionType.CHECK_LOGIN,\n                payload: response.data.data\n              });\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: UserActionType.ON_LOGIN_ERROR,\n              payload: _context.t0\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nexport var getUserInfo = function getUserInfo() {\n  return function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(cansa[1] + \"/api/user/get/user\"));\n\n          case 3:\n            response = _context2.sent;\n\n            if (!response) {\n              dispatch({\n                type: UserActionType.ON_LOGIN_ERROR,\n                payload: 'Product list error'\n              });\n            } else {\n              dispatch({\n                type: UserActionType.GET_UER_INFO,\n                payload: response.data.data\n              });\n            }\n\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch({\n              type: UserActionType.ON_LOGIN_ERROR,\n              payload: _context2.t0\n            });\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};","map":{"version":3,"sources":["E:/React_mobile_brand/CDTN-2/src/redux/actions/userActions.ts"],"names":["axios","UserActionType","cansa","checkLogin","dispatch","get","response","type","ON_LOGIN_ERROR","payload","CHECK_LOGIN","data","getUserInfo","GET_UER_INFO"],"mappings":";AAEA,OAAQA,KAAR,MAAoB,OAApB;AACA,SAASC,cAAT;AACA,SAAQC,KAAR;AAmBA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC5B,SAAO,iBAAQC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEwBJ,KAAK,CAACK,GAAN,CAAkBH,KAAK,CAAC,CAAD,CAAvB,2BAFxB;;AAAA;AAEOI,YAAAA,QAFP;;AAGC,gBAAG,CAACA,QAAJ,EAAa;AACTF,cAAAA,QAAQ,CAAC;AACLG,gBAAAA,IAAI,EAAGN,cAAc,CAACO,cADjB;AAELC,gBAAAA,OAAO,EAAE;AAFJ,eAAD,CAAR;AAIH,aALD,MAKK;AAEDL,cAAAA,QAAQ,CAAC;AACLG,gBAAAA,IAAI,EAAEN,cAAc,CAACS,WADhB;AAELD,gBAAAA,OAAO,EAAEH,QAAQ,CAACK,IAAT,CAAcA;AAFlB,eAAD,CAAR;AAIH;;AAdF;AAAA;;AAAA;AAAA;AAAA;AAiBCP,YAAAA,QAAQ,CAAC;AACLG,cAAAA,IAAI,EAAGN,cAAc,CAACO,cADjB;AAELC,cAAAA,OAAO;AAFF,aAAD,CAAR;;AAjBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAwBH,CAzBM;AA2BP,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC7B,SAAO,kBAAQR,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAE4BJ,KAAK,CAACK,GAAN,CAAkBH,KAAK,CAAC,CAAD,CAAvB,wBAF5B;;AAAA;AAEWI,YAAAA,QAFX;;AAGK,gBAAG,CAACA,QAAJ,EAAa;AACTF,cAAAA,QAAQ,CAAC;AACLG,gBAAAA,IAAI,EAAGN,cAAc,CAACO,cADjB;AAELC,gBAAAA,OAAO,EAAE;AAFJ,eAAD,CAAR;AAIH,aALD,MAKK;AAEDL,cAAAA,QAAQ,CAAC;AACLG,gBAAAA,IAAI,EAAEN,cAAc,CAACY,YADhB;AAELJ,gBAAAA,OAAO,EAAEH,QAAQ,CAACK,IAAT,CAAcA;AAFlB,eAAD,CAAR;AAIH;;AAdN;AAAA;;AAAA;AAAA;AAAA;AAgBCP,YAAAA,QAAQ,CAAC;AACLG,cAAAA,IAAI,EAAGN,cAAc,CAACO,cADjB;AAELC,cAAAA,OAAO;AAFF,aAAD,CAAR;;AAhBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAuBH,CAxBM","sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { CommentModel, UserModel } from \"../models\";\r\nimport  axios  from 'axios';\r\nimport { UserActionType } from \"../action-types\";\r\nimport {cansa} from \"../../consts/Selector\";\r\n\r\nexport interface CheckLogin{\r\n    readonly type: UserActionType.CHECK_LOGIN,\r\n    payload?: boolean,\r\n}\r\n\r\nexport interface UserErrorAction{\r\n    readonly type: UserActionType.ON_LOGIN_ERROR,\r\n    payload: any\r\n}\r\n\r\nexport interface GetUserInfor{\r\n    readonly type: UserActionType.GET_UER_INFO,\r\n    payload?: UserModel\r\n}\r\n\r\nexport type UserActions = CheckLogin | UserErrorAction | GetUserInfor;\r\n\r\nexport const checkLogin = () => {\r\n    return async ( dispatch: Dispatch<UserActions>) => {\r\n        try {\r\n            const response = await axios.get<any>(`${cansa[1]}/api/user/check/login`)\r\n            if(!response){\r\n                dispatch({\r\n                    type:  UserActionType.ON_LOGIN_ERROR,\r\n                    payload: 'Product list error'\r\n                })\r\n            }else{\r\n                // save our location in local storage\r\n                dispatch({\r\n                    type: UserActionType.CHECK_LOGIN,\r\n                    payload: response.data.data\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type:  UserActionType.ON_LOGIN_ERROR,\r\n                payload: error\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const getUserInfo = () => {\r\n    return async ( dispatch: Dispatch<UserActions>) => {\r\n        try {\r\n                const response = await axios.get<any>(`${cansa[1]}/api/user/get/user`)\r\n                if(!response){\r\n                    dispatch({\r\n                        type:  UserActionType.ON_LOGIN_ERROR,\r\n                        payload: 'Product list error'\r\n                    })\r\n                }else{\r\n                    // save our location in local storage\r\n                    dispatch({\r\n                        type: UserActionType.GET_UER_INFO,\r\n                        payload: response.data.data\r\n                    })\r\n                }\r\n        } catch (error) {\r\n            dispatch({\r\n                type:  UserActionType.ON_LOGIN_ERROR,\r\n                payload: error\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}