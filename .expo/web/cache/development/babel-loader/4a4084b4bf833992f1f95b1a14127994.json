{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { CartActionType } from \"../action-types\";\nimport { cansa } from \"../../consts/Selector\";\nexport var getCart = function getCart() {\n  return function _callee(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(cansa[1] + \"/api/cart/all/e4611a028c71342a5b083d2cbf59c494\"));\n\n          case 3:\n            response = _context.sent;\n\n            if (!response) {\n              dispatch({\n                type: CartActionType.ON_CART_ERROR,\n                payload: 'Product list error'\n              });\n            } else {\n              dispatch({\n                type: CartActionType.GET_ALL_CART,\n                payload: response.data.data\n              });\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: CartActionType.ON_CART_ERROR,\n              payload: _context.t0\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nexport var addCart = function addCart(product_id) {\n  return function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(cansa[1] + \"/api/cart/add/\" + product_id + \"/e4611a028c71342a5b083d2cbf59c494\"));\n\n          case 3:\n            response = _context2.sent;\n\n            if (!response) {\n              dispatch({\n                type: CartActionType.ON_CART_ERROR,\n                payload: 'Product list error'\n              });\n            } else {\n              dispatch({\n                type: CartActionType.ADD_TO_CART,\n                payload: response.data.status\n              });\n            }\n\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch({\n              type: CartActionType.ON_CART_ERROR,\n              payload: _context2.t0\n            });\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nexport var updateCart = function updateCart(product_id, qty) {\n  return function _callee3(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(cansa[1] + \"/api/cart/update/\" + product_id + \"/\" + qty + \"/e4611a028c71342a5b083d2cbf59c494\"));\n\n          case 3:\n            response = _context3.sent;\n\n            if (!response) {\n              dispatch({\n                type: CartActionType.ON_CART_ERROR,\n                payload: 'Product list error'\n              });\n            } else {\n              dispatch({\n                type: CartActionType.UPDATE_CART,\n                payload: response.data.data\n              });\n            }\n\n            _context3.next = 10;\n            break;\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](0);\n            dispatch({\n              type: CartActionType.ON_CART_ERROR,\n              payload: _context3.t0\n            });\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};","map":{"version":3,"sources":["E:/React_mobile_brand/CDTN-2/src/redux/actions/cartActions.ts"],"names":["axios","CartActionType","cansa","getCart","dispatch","get","response","type","ON_CART_ERROR","payload","GET_ALL_CART","data","addCart","product_id","ADD_TO_CART","status","updateCart","qty","UPDATE_CART"],"mappings":"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","sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { ProductModel } from \"../models\";\r\nimport axios from 'axios';\r\nimport { CartActionType, ProductActionType } from \"../action-types\";\r\nimport { cansa } from \"../../consts/Selector\";\r\n\r\nexport interface GetAllCart {\r\n    readonly type: CartActionType.GET_ALL_CART,\r\n    payload?: [ProductModel]\r\n}\r\nexport interface UpdateCart {\r\n    readonly type: CartActionType.UPDATE_CART,\r\n    payload?: [ProductModel]\r\n}\r\nexport interface CartErrorAction {\r\n    readonly type: CartActionType.ON_CART_ERROR,\r\n    payload: any\r\n}\r\nexport interface AddCartAction {\r\n    readonly type: CartActionType.ADD_TO_CART,\r\n    payload: any\r\n}\r\n\r\nexport type CartActions = GetAllCart | CartErrorAction | AddCartAction | UpdateCart;\r\n\r\nexport const getCart = () => {\r\n    return async (dispatch: Dispatch<CartActions>) => {\r\n        try {\r\n            const response = await axios.get<any>(`${cansa[1]}/api/cart/all/e4611a028c71342a5b083d2cbf59c494`)\r\n            if (!response) {\r\n                dispatch({\r\n                    type: CartActionType.ON_CART_ERROR,\r\n                    payload: 'Product list error'\r\n                })\r\n            } else {\r\n                // save our location in local storage\r\n                dispatch({\r\n                    type: CartActionType.GET_ALL_CART,\r\n                    payload: response.data.data\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: CartActionType.ON_CART_ERROR,\r\n                payload: error\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const addCart = (product_id: number) => {\r\n    return async (dispatch: Dispatch<CartActions>) => {\r\n        try {\r\n            const response = await axios.get<any>(`${cansa[1]}/api/cart/add/${product_id}/e4611a028c71342a5b083d2cbf59c494`)\r\n            if (!response) {\r\n                dispatch({\r\n                    type: CartActionType.ON_CART_ERROR,\r\n                    payload: 'Product list error'\r\n                })\r\n            } else {\r\n                // save our location in local storage\r\n                dispatch({\r\n                    type: CartActionType.ADD_TO_CART,\r\n                    payload: response.data.status\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: CartActionType.ON_CART_ERROR,\r\n                payload: error\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const updateCart = (product_id: number, qty: number) => {\r\n    return async (dispatch: Dispatch<CartActions>) => {\r\n        try {\r\n            const response = await axios.get<any>(`${cansa[1]}/api/cart/update/${product_id}/${qty}/e4611a028c71342a5b083d2cbf59c494`)\r\n            if (!response) {\r\n                dispatch({\r\n                    type: CartActionType.ON_CART_ERROR,\r\n                    payload: 'Product list error'\r\n                })\r\n            } else {\r\n                // save our location in local storage\r\n                dispatch({\r\n                    type: CartActionType.UPDATE_CART,\r\n                    payload: response.data.data\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: CartActionType.ON_CART_ERROR,\r\n                payload: error\r\n            })\r\n        }\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}