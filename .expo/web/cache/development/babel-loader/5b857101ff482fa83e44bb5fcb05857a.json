{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CommentActionType } from \"../action-types\";\nvar initialState = {\n  comment: undefined,\n  error: undefined\n};\n\nvar commentReducer = function commentReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CommentActionType.GET_ALL_COMMENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        comment: action.payload\n      });\n\n    case CommentActionType.ADD_COMMENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        comment: action.payload\n      });\n\n    case CommentActionType.ON_COMMENT_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default commentReducer;","map":{"version":3,"sources":["E:/React_mobile_brand/CDTN-2/src/redux/reducers/commentReducer.ts"],"names":["CommentActionType","initialState","comment","undefined","error","commentReducer","state","action","type","GET_ALL_COMMENT","payload","ADD_COMMENT","ON_COMMENT_ERROR"],"mappings":";;;;;;AAAA,SAASA,iBAAT;AAKA,IAAMC,YAA0B,GAAG;AAC/BC,EAAAA,OAAO,EAAEC,SADsB;AAE/BC,EAAAA,KAAK,EAAED;AAFwB,CAAnC;;AAKA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAgE;AAAA,MAA/DC,KAA+D,uEAAzCL,YAAyC;AAAA,MAA3BM,MAA2B;;AACnF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,iBAAiB,CAACS,eAAvB;AACI,6CACOH,KADP;AAEIJ,QAAAA,OAAO,EAAEK,MAAM,CAACG;AAFpB;;AAIJ,SAAKV,iBAAiB,CAACW,WAAvB;AACI,6CACOL,KADP;AAEIJ,QAAAA,OAAO,EAAEK,MAAM,CAACG;AAFpB;;AAIJ,SAAKV,iBAAiB,CAACY,gBAAvB;AACI,6CACON,KADP;AAEIF,QAAAA,KAAK,EAAEG,MAAM,CAACG;AAFlB;;AAIJ;AACI,aAAOJ,KAAP;AAjBR;AAoBH,CArBD;;AAuBA,eAAeD,cAAf","sourcesContent":["import { CommentActionType, SliderActionType } from \"../action-types\";\r\nimport { CommentActions } from \"../actions/commentActions\";\r\nimport { CommentState, CommentModel } from \"../models\";\r\n\r\n\r\nconst initialState: CommentState = {\r\n    comment: undefined,\r\n    error: undefined\r\n}\r\n\r\nconst commentReducer = (state: CommentState = initialState, action: CommentActions) => {\r\n    switch (action.type) {\r\n        case CommentActionType.GET_ALL_COMMENT:\r\n            return {\r\n                ...state,\r\n                comment: action.payload\r\n            }\r\n        case CommentActionType.ADD_COMMENT:\r\n            return {\r\n                ...state,\r\n                comment: action.payload\r\n            }\r\n        case CommentActionType.ON_COMMENT_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport default commentReducer;"]},"metadata":{},"sourceType":"module"}