{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { CommplaintActionType } from \"../action-types\";\nimport { cansa } from \"../../consts/Selector\";\nexport var addComplaint = function addComplaint(product_id, complaint_content) {\n  return function _callee(dispatch) {\n    var data, response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = {\n              complaint_content: complaint_content,\n              product_id: product_id\n            };\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(cansa[1] + \"/api/complaint/insert/e4611a028c71342a5b083d2cbf59c494\", data));\n\n          case 4:\n            response = _context.sent;\n\n            if (!response) {\n              dispatch({\n                type: CommplaintActionType.ON_COMPLAINT_ERROR,\n                payload: 'Product list error'\n              });\n            } else {\n              dispatch({\n                type: CommplaintActionType.ADD_COMPLAINT,\n                payload: response.data.status\n              });\n            }\n\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch({\n              type: CommplaintActionType.ON_COMPLAINT_ERROR,\n              payload: _context.t0\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  };\n};","map":{"version":3,"sources":["E:/React_mobile_brand/CDTN-2/src/redux/actions/complaintActions.ts"],"names":["axios","CommplaintActionType","cansa","addComplaint","product_id","complaint_content","dispatch","data","post","response","type","ON_COMPLAINT_ERROR","payload","ADD_COMPLAINT","status"],"mappings":";AAEA,OAAQA,KAAR,MAAoB,OAApB;AACA,SAA6BC,oBAA7B;AACA,SAAQC,KAAR;AAcA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,UAAD,EAAoBC,iBAApB,EAAiD;AACzE,SAAO,iBAAQC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,IADH,GACU;AACTF,cAAAA,iBAAiB,EAAEA,iBADV;AAETD,cAAAA,UAAU,EAAEA;AAFH,aADV;AAAA;AAAA;AAAA,6CAMwBJ,KAAK,CAACQ,IAAN,CAAmBN,KAAK,CAAC,CAAD,CAAxB,6DAAoFK,IAApF,CANxB;;AAAA;AAMOE,YAAAA,QANP;;AAOC,gBAAG,CAACA,QAAJ,EAAa;AACTH,cAAAA,QAAQ,CAAC;AACLI,gBAAAA,IAAI,EAAET,oBAAoB,CAACU,kBADtB;AAELC,gBAAAA,OAAO,EAAE;AAFJ,eAAD,CAAR;AAIH,aALD,MAKK;AAEDN,cAAAA,QAAQ,CAAC;AACLI,gBAAAA,IAAI,EAAET,oBAAoB,CAACY,aADtB;AAELD,gBAAAA,OAAO,EAAEH,QAAQ,CAACF,IAAT,CAAcO;AAFlB,eAAD,CAAR;AAIH;;AAlBF;AAAA;;AAAA;AAAA;AAAA;AAqBCR,YAAAA,QAAQ,CAAC;AACLI,cAAAA,IAAI,EAAET,oBAAoB,CAACU,kBADtB;AAELC,cAAAA,OAAO;AAFF,aAAD,CAAR;;AArBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA4BH,CA7BM","sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { CommentModel } from \"../models\";\r\nimport  axios  from 'axios';\r\nimport {  CommentActionType, CommplaintActionType } from \"../action-types\";\r\nimport {cansa} from \"../../consts/Selector\";\r\n\r\n\r\nexport interface ComplaintErrorAction{\r\n    readonly type: CommplaintActionType.ON_COMPLAINT_ERROR,\r\n    payload: any\r\n}\r\nexport interface AddComplaintAction{\r\n    readonly type: CommplaintActionType.ADD_COMPLAINT,\r\n    payload: any\r\n}\r\n\r\nexport type ComplaintActions = ComplaintErrorAction | AddComplaintAction;\r\n\r\nexport const addComplaint = (product_id: number,complaint_content:string) => {\r\n    return async ( dispatch: Dispatch<ComplaintActions>) => {\r\n        const data = {\r\n            complaint_content: complaint_content,\r\n            product_id: product_id,\r\n        }\r\n        try {\r\n            const response = await axios.post<any>(`${cansa[1]}/api/complaint/insert/e4611a028c71342a5b083d2cbf59c494`,data)\r\n            if(!response){\r\n                dispatch({\r\n                    type: CommplaintActionType.ON_COMPLAINT_ERROR,\r\n                    payload: 'Product list error'\r\n                })\r\n            }else{\r\n                // save our location in local storage\r\n                dispatch({\r\n                    type: CommplaintActionType.ADD_COMPLAINT,\r\n                    payload: response.data.status,\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            dispatch({\r\n                type: CommplaintActionType.ON_COMPLAINT_ERROR,\r\n                payload: error\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}